x_axis = "Cohesion Distribution")
ggplotly(p)
})
# depth
output$H_dist <- renderPlotly({
req(input$iter_n)
p <- hist_plot(param_df = H(), input_choice = input$H_choice, dist_type_csv = input$H_csv_dist_type
,dist_type_m_sd = input$H_m_sd_dist_type, csv = choice_csv,  m_sd = choice_m_sd, constant = choice_const,
x_axis = "Depth Distribution")
ggplotly(p)
})
#ground water height ratio
output$m_dist <- renderPlotly({
req(input$iter_n)
p <- hist_plot(param_df = m(), input_choice = input$m_choice, dist_type_csv = input$m_csv_dist_type
,dist_type_m_sd = input$m_m_sd_dist_type, csv = choice_csv,  m_sd = choice_m_sd, constant = choice_const,
x_axis = "Ratio “m” Distribution")
ggplotly(p)
})
# --------------------------> RENDER FACTOR OF SAFETY HISTOGRAM PLOT <-----------------------###
output$myPlot <- renderPlotly({
req(input$iter_n)
req(FOS())
FOS_df <- as.data.frame(FOS())
FOS_df <- data.frame(x=FOS_df, above=FOS_df>=1 )
colnames(FOS_df) <- c("FOS", "above")
p <- ggplot(FOS_df, aes(x=FOS, fill = above)) +
geom_histogram(color="black", binwidth = 0.1, breaks = seq(0, max(FOS()), by=0.1)) +
ylab("Count") + xlab("Factor of Safety")
ggplotly(p) %>% add_annotations(text="Above 1:", xref="paper", yref="paper",
x=0.4, xanchor="right",
y=-0.3, yanchor="bottom",    # Same y as legend below
legendtitle=TRUE, showarrow=FALSE ) %>%
layout(legend=list(x = 0.4, y = -0.2, orientation = "h",  yanchor="top") )
})
##### ---------> VALUE BOX DISPLAYING NUMBER OF SIMULATIONS PERFORMED <-----------------------####
output$sim_no_box <- renderValueBox({
req(input$iter_n)
req(FOS())
iter_n <- formatC(input$iter_n, format = "d", big.mark = ",")
valueBox(
paste0(iter_n), "Simulations", icon = icon("ffas fa-bars", lib = "font-awesome"),
color = "yellow"
)
})
#### -------------->  FAILURE PROBABILITY VALUE BOX <-------------------- #########
output$fail_prob_box <- renderValueBox({
req(input$iter_n)
req(FOS())
FOS_df <- as.data.frame(FOS())
FOS_df <- data.frame(x=FOS_df, above=FOS_df>=1 )
colnames(FOS_df) <- c("FOS", "above")
df <- FOS_df
P_failure <- round(count_if("FALSE", df$above)/length(df$above)*100, digits = 1)
P_failure <- signif(P_failure,3)
valueBox(
paste0(P_failure, "%"), "Failure Probability", icon = icon("ffas fa-window-close", lib = "font-awesome"),#icon = icon("remove-sign", lib = "glyphicon"),
color = "red"
)
})
#### -------------->  FOS MEAN VALUE BOX <-------------------- #########
output$mean_prob_box <- renderValueBox({
req(input$iter_n)
req(FOS())
FOS_mean <- mean(FOS())
FOS_mean <- signif(FOS_mean, 3)
valueBox(
paste0(FOS_mean), "Average Factor of Safety", icon = icon("ffas fa-toggle-down", lib = "font-awesome"),
color = "yellow"
)
})
#### -------------->  FOS SD VALUE BOX <-------------------- #########
output$sd_prob_box <- renderValueBox({
req(input$iter_n)
req(FOS())
FOS_sd <- sd(FOS())
FOS_sd <- signif(FOS_sd,3)
valueBox(
paste0(FOS_sd), "Standard Deviation of Factor of Safety", icon = icon("ffas fa-bar-chart-o", lib = "font-awesome"),
color = "yellow"
)
})
#### -------------->  BOX WITH COMMENT BASED ON THE OUTPUT PROBABILITY OF FAILURE <-------------------- ######
output$comments <- renderText({
req(input$iter_n)
req(FOS())
FOS_df <- as.data.frame(FOS())
FOS_df <- data.frame(x=FOS_df, above=FOS_df>=1 )
colnames(FOS_df) <- c("FOS", "above")
df <- FOS_df
P_failure <- count_if("FALSE", df$above)/length(df$above)*100
P_failure <- signif(P_failure, 3)
iter_n <- formatC(input$iter_n, format = "d", big.mark = ",")
comment <- paste("Using infinite slope stability equation and based on", iter_n, " Monte Carlo simulations, there is a", P_failure, "% chance that the slope will fail under the given input parameters.")
})
}
# -------- > RUN THE APPLICATION < ----------
shinyApp(ui = ui, server = server)
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('~/Google Drive/Education/Bath Univeristy/3rd Year/3yr_2sm/Engineering Risk and Uncertainty/Coursework/FINALE/Shiny_Dashboard_Monte_Carlo_v19.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('~/Google Drive/Education/Bath Univeristy/3rd Year/3yr_2sm/Engineering Risk and Uncertainty/Coursework/FINALE/Shiny_Dashboard_Monte_Carlo_v19.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('~/Google Drive/Education/Bath Univeristy/3rd Year/3yr_2sm/Engineering Risk and Uncertainty/Coursework/FINALE/Shiny_Dashboard_Monte_Carlo_v19.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('~/Google Drive/Education/Bath Univeristy/3rd Year/3yr_2sm/Engineering Risk and Uncertainty/Coursework/FINALE/Shiny_Dashboard_Monte_Carlo_v19.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
x <- 4
print(x)
runApp('Dashboard_str_elements.R')
x <- as.text(4)
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#-------INTERPOLATION FUNCTION--------
interp_bh <- function(excel_file_path,x_i,y_i,method_i){
original_df <- read_excel(excel_file_path)
z <- original_df[2:ncol(original_df)] #remove column with the name
original_df_matrix <- as.matrix(z) #transform from df into a matrix
original_df <- as.matrix(original_df)
x <- as.vector(as.numeric(colnames(original_df)))[2:length(colnames(original_df))]
y <- as.vector(original_df[,1])
#x_i <- 4.67
#y_i <- 400
z <- interp2(x, y, hollowcore_load_span_matrix,
y_i, x_i, method_i)
return(z)
}
answer <- interp_bh(excel_file_path = "./single-span-one-way-slab.xlsx",x_i = 6.5, y_i = 6.5, method = "linear")
library("readxl") #library for reading excel files
library("pracma") #library for bi-linear interpolation fucntion
#-------INTERPOLATION FUNCTION--------
interp_bh <- function(excel_file_path,x_i,y_i,method_i){
original_df <- read_excel(excel_file_path)
z <- original_df[2:ncol(original_df)] #remove column with the name
original_df_matrix <- as.matrix(z) #transform from df into a matrix
original_df <- as.matrix(original_df)
x <- as.vector(as.numeric(colnames(original_df)))[2:length(colnames(original_df))]
y <- as.vector(original_df[,1])
#x_i <- 4.67
#y_i <- 400
z <- interp2(x, y, hollowcore_load_span_matrix,
y_i, x_i, method_i)
return(z)
}
answer <- interp_bh(excel_file_path = "./single-span-one-way-slab.xlsx",x_i = 6.5, y_i = 6.5, method = "linear")
#-------INTERPOLATION FUNCTION--------
interp_bh <- function(excel_file_path,x_i,y_i,method_i){
original_df <- read_excel(excel_file_path)
z <- original_df[2:ncol(original_df)] #remove column with the name
original_df_matrix <- as.matrix(z) #transform from df into a matrix
original_df <- as.matrix(original_df)
x <- as.vector(as.numeric(colnames(original_df)))[2:length(colnames(original_df))]
y <- as.vector(original_df[,1])
#x_i <- 4.67
#y_i <- 400
z <- interp2(x, y, original_df_matrix,
y_i, x_i, method_i)
return(z)
}
answer <- interp_bh(excel_file_path = "./single-span-one-way-slab.xlsx",x_i = 6.5, y_i = 6.5, method = "linear")
asnwer
answer <- interp_bh(excel_file_path = "./single-span-one-way-slab.xlsx",x_i = 6.5, y_i = 6.5, method = "linear")
excel_file_path = "./single-span-one-way-slab.xlsx"
x_i = 6.5
y_i = 3
method = "linear"
original_df <- read_excel(excel_file_path)
original_df
str(original_df)
z <- original_df[2:ncol(original_df)] #remove column with the name
z
z
original_df_matrix <- as.matrix(z) #transform from df into a matrix
original_df_matrix
original_df <- as.matrix(original_df)
x <- as.vector(as.numeric(colnames(original_df)))[2:length(colnames(original_df))]
x
y <- as.vector(original_df[,1])
y
y
#x_i <- 4.67
#y_i <- 400
z <- interp2(x, y, original_df_matrix,
y_i, x_i, method_i)
method_i = "linear"
#x_i <- 4.67
#y_i <- 400
z <- interp2(x, y, original_df_matrix,
y_i, x_i, method_i)
z
excel_file_path = "./single-span-one-way-slab.xlsx"
x_i = 6.5
y_i = 3
method_i = "linear"
original_df <- read_excel(excel_file_path)
original_df
z <- original_df[2:ncol(original_df)] #remove column with the name
z
original_df_matrix <- as.matrix(z) #transform from df into a matrix
original_df_matrix
original_df <- as.matrix(original_df)
x <- as.vector(as.numeric(colnames(original_df)))[2:length(colnames(original_df))]
x
y <- as.vector(original_df[,1])
y
#x_i <- 4.67
#y_i <- 400
z <- interp2(x, y, original_df_matrix,
y_i, x_i, method_i)
z
#x_i <- 4.67
#y_i <- 400
z <- interp2(x, y, original_df_matrix,
x_i, y_i, method_i)
z
excel_file_path = "./single-span-one-way-slab.xlsx"
x_i = 4
y_i = 2.5
method_i = "linear"
original_df <- read_excel(excel_file_path)
original_df
z <- original_df[2:ncol(original_df)] #remove column with the name
z
original_df_matrix <- as.matrix(z) #transform from df into a matrix
original_df_matrix
original_df <- as.matrix(original_df)
x <- as.vector(as.numeric(colnames(original_df)))[2:length(colnames(original_df))]
x
y <- as.vector(original_df[,1])
y
#x_i <- 4.67
#y_i <- 400
z <- interp2(x, y, original_df_matrix,
x_i, y_i, method_i)
z
excel_file_path = "./single-span-one-way-slab.xlsx"
x_i = 10
y_i = 9.5
method_i = "linear"
original_df <- read_excel(excel_file_path)
original_df
z <- original_df[2:ncol(original_df)] #remove column with the name
z
original_df_matrix <- as.matrix(z) #transform from df into a matrix
original_df_matrix
original_df <- as.matrix(original_df)
x <- as.vector(as.numeric(colnames(original_df)))[2:length(colnames(original_df))]
x
y <- as.vector(original_df[,1])
y
#x_i <- 4.67
#y_i <- 400
z <- interp2(x, y, original_df_matrix,
x_i, y_i, method_i)
z
x_i = 9
y_i = 9.5
method_i = "linear"
original_df <- read_excel(excel_file_path)
original_df
z <- original_df[2:ncol(original_df)] #remove column with the name
z
original_df_matrix <- as.matrix(z) #transform from df into a matrix
original_df_matrix
original_df <- as.matrix(original_df)
x <- as.vector(as.numeric(colnames(original_df)))[2:length(colnames(original_df))]
x
y <- as.vector(original_df[,1])
y
#x_i <- 4.67
#y_i <- 400
z <- interp2(x, y, original_df_matrix,
x_i, y_i, method_i)
z
x_i = 10
y_i = 10
method_i = "linear"
original_df <- read_excel(excel_file_path)
original_df
z <- original_df[2:ncol(original_df)] #remove column with the name
z
original_df_matrix <- as.matrix(z) #transform from df into a matrix
original_df_matrix
original_df <- as.matrix(original_df)
x <- as.vector(as.numeric(colnames(original_df)))[2:length(colnames(original_df))]
x
y <- as.vector(original_df[,1])
y
#x_i <- 4.67
#y_i <- 400
z <- interp2(x, y, original_df_matrix,
x_i, y_i, method_i)
z
excel_file_path = "./single-span-one-way-slab.xlsx"
x_i = 9.9
y_i = 9.9
method_i = "linear"
original_df <- read_excel(excel_file_path)
original_df
z <- original_df[2:ncol(original_df)] #remove column with the name
z
original_df_matrix <- as.matrix(z) #transform from df into a matrix
original_df_matrix
original_df <- as.matrix(original_df)
x <- as.vector(as.numeric(colnames(original_df)))[2:length(colnames(original_df))]
x
y <- as.vector(original_df[,1])
y
#x_i <- 4.67
#y_i <- 400
z <- interp2(x, y, original_df_matrix,
x_i, y_i, method_i)
z
excel_file_path = "./single-span-one-way-slab.xlsx"
x_i = 9
y_i = 10
method_i = "linear"
original_df <- read_excel(excel_file_path)
original_df
z <- original_df[2:ncol(original_df)] #remove column with the name
z
original_df_matrix <- as.matrix(z) #transform from df into a matrix
original_df_matrix
original_df <- as.matrix(original_df)
x <- as.vector(as.numeric(colnames(original_df)))[2:length(colnames(original_df))]
x
y <- as.vector(original_df[,1])
y
#x_i <- 4.67
#y_i <- 400
z <- interp2(x, y, original_df_matrix,
x_i, y_i, method_i)
z
#-------INTERPOLATION FUNCTION--------
interp_bh <- function(excel_file_path,x_i,y_i,method_i){
original_df <- read_excel(excel_file_path)
z <- original_df[2:ncol(original_df)] #remove column with the name
original_df_matrix <- as.matrix(z) #transform from df into a matrix
original_df <- as.matrix(original_df)
x <- as.vector(as.numeric(colnames(original_df)))[2:length(colnames(original_df))]
y <- as.vector(original_df[,1])
z <- interp2(x, y, original_df_matrix,
x_i, y_i, method_i)
}
answer <- interp_bh(excel_file_path = "./single-span-one-way-slab.xlsx",x_i = 6.5, y_i = 6.5, method_i = "linear")
asnwer
interp_bh(excel_file_path = "./single-span-one-way-slab.xlsx",x_i = 6.5, y_i = 6.5, method_i = "linear")
#-------INTERPOLATION FUNCTION--------
interp_bh <- function(excel_file_path,x_i,y_i,method_i){
original_df <- read_excel(excel_file_path)
z <- original_df[2:ncol(original_df)] #remove column with the name
original_df_matrix <- as.matrix(z) #transform from df into a matrix
original_df <- as.matrix(original_df)
x <- as.vector(as.numeric(colnames(original_df)))[2:length(colnames(original_df))]
y <- as.vector(original_df[,1])
z <- interp2(x, y, original_df_matrix,
x_i, y_i, method_i)
return(z)
}
interp_bh(excel_file_path = "./single-span-one-way-slab.xlsx",x_i = 6.5, y_i = 6.5, method_i = "linear")
asnwer
answer <- interp_bh(excel_file_path = "./single-span-one-way-slab.xlsx",x_i = 6.5, y_i = 6.5, method_i = "linear")
asnwer
answer <- interp_bh(excel_file_path = "./single-span-one-way-slab.xlsx",x_i = 6.5, y_i = 6.5, method_i = "linear")
asnwer
asnswer
answer
answer <- interp_bh(excel_file_path = "./single-span-one-way-slab.xlsx",x_i = 6.5, y_i = 6.5, method_i = "linear")
answer
answer <- interp_bh(excel_file_path = "./single-span-one-way-slab.xlsx",x_i = 9, y_i = 6.5, method_i = "linear")
answer
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
# Function for different output depending on the selected radio_button
# it shows csv input when csv button is selected and mean and sd input when other type of data is selected
input_type_selector_excel_dflt <- function(input_choice, excel, dflt, excel_tag,
csv_dist_tag, m_tag, sd_tag, m_val, sd_val, m_sd_dist_tag, const_tag, const_value,
dist_choices, selected_m_sd_distr, selected_csv_distr){
if (input_choice == excel) {
list(
fileInput(inputId = rc_table_tag, label = "RC Slab - load spab table", accept = ".xlsx"),
fileInput(inputId = hollowcore_table_tag, label = "Hollowcore - looad span table", accept = ".xlsx"),
fileInput(inputId = clt_table_tag, label = "CLT - load span table", accept = ".xlsx")
)
}
else {
}
}
# Function for different output depending on the selected radio_button
# it shows csv input when csv button is selected and mean and sd input when other type of data is selected
input_type_selector_excel_dflt <- function(input_choice, excel, dflt, excel_tag, dflt_tag,rc_table_tag,
hollowcore_table_tag, clt_table_tag)
{
if (input_choice == excel) {
list(
fileInput(inputId = rc_table_tag, label = "RC Slab - load spab table", accept = ".xlsx"),
fileInput(inputId = hollowcore_table_tag, label = "Hollowcore - looad span table", accept = ".xlsx"),
fileInput(inputId = clt_table_tag, label = "CLT - load span table", accept = ".xlsx")
)
}
else {
}
}
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
rc_depth <- interp_bh(input$rc_table ,x_i = 9, y_i = 6.5, method_i = "linear")
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
library("readxl") #library for reading excel files
sessionInfo()
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
library(shiny); runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
runApp('Dashboard_str_elements.R')
